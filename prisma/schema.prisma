generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  credits       Int       @default(15)
  quizzes       Quiz[]
}

enum QuestionType {
  MCQ
  SA
  TF
  MT
}

model Questions {
  id       Int          @id @default(autoincrement())
  quizId   String
  question String
  type     QuestionType @default(MCQ)
  options  String[]     @default([])
  answer   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum QuizDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Topics {
  LITERATURE
  US_HISTORY
  WORLD_HISTORY
  MATH_I
  MATH_II
  BIOLOGY_E
  BIOLOGY_M
  CHEMISTRY
  PHYSICS
}

model Quiz {
  id          String         @id  @default(cuid())
  email       String
  user        User           @relation(fields: [email], references: [id], onDelete: Cascade)
  topic       Topics
  difficulty  QuizDifficulty
  title       String
  questions   Questions[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  score       Int            @default(0)
  reviewNotes String?        @default("")
}

enum DocumentType {
  PDF
  DOCX
  DOC
  TXT
}

model Document {
  id        String       @id @default(cuid())
  email     String
  name      String
  topic     Topics
  subtopic  String
  type      DocumentType
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  content   String
}

model Metadata {
  id        String      @id  @default(cuid())
  topic     Topics      @unique
  subtopics String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
